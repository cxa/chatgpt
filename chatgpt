#!/bin/sh

show_usage_if_needed() {
    first_arg="${1--h}"
    if [ "$first_arg" = "-h" ] || [ "$first_arg" = "--help" ]; then
        cat <<EOF
Usage:
1. chatgpt system-message user-message
e.g. chatgpt "You are a BASH professional" "Inverse regex in AWK?"

2. chatgpt user-message
e.g. chatgpt "Tell me the top 10 largest cities on the earth"
EOF
        exit 1
    fi
}

check_requirements() {
    if [ -z "$OPENAI_API_KEY" ]; then
        cat <<'EOF'
`$OPENAI_API_KEY' must be set, you can grab one from
https://platform.openai.com/account/api-keys,
and `export OPENAI_API_KEY="[your key]"'
EOF
        exit 1
    fi

    if ! command -v curl >/dev/null; then
        echo "\`curl' not found."
        exit 1
    fi

    if ! command -v jq >/dev/null; then
        echo "\`jq' not found."
        exit 1
    fi
}

format_sse_data() {
    sed -u 's/^data: //' |
        jq --unbuffered -r '[.choices[].delta.content?] | join("")' 2>/dev/null |
        # output newline only if it's a newline
        awk '{if ($0 == "" && NF == 0) { printf("\n") } else { printf("%s", $0) } fflush() }'
}

request() {
    if [ $# -gt 1 ]; then
        messages=$(jq --null-input \
            --arg sys_msg "$1" \
            --arg user_msg "$2" \
            '[{"role": "system", "content": $sys_msg}, {"role": "user", "content": $user_msg}]')
    else
        messages=$(jq --null-input \
            --arg user_msg "$1" \
            '[{"role": "user", "content": $user_msg}]')
    fi

    body=$(
        jq --null-input --argjson messages "$messages" \
            '{"model": "gpt-3.5-turbo", "messages": $messages, "stream": true}'
    )
    curl -s --no-buffer --http1.1 https://api.openai.com/v1/chat/completions \
        -H 'Content-Type: application/json' \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d "$body" |
        while read -r event; do
            format_sse_data "$event"
        done
}

main() {
    check_requirements "$@"
    show_usage_if_needed "$@"
    request "$@"
}

main "$@"
