#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail
if [[ "${TRACE-0}" == "1" ]]; then
    set -o xtrace
fi

cd "$(dirname "\$0")"

function usage() {
    if [[ "${1-h}" =~ ^-*h(elp)?$ ]]; then
        cat <<EOF
Usage:
1. chatgpt system-message user-message
e.g. chatgpt "You are a BASH professional" "Inverse regex in AWK?"

2. chatgpt user-message
e.g. chatgpt "Tell me the top 10 largest cities on the earth"
EOF
        exit 1
    fi
}

function check_requirements() {
    if [[ -z "${OPENAI_API_KEY:+x}" ]]; then
        cat <<'EOF'
`$OPENAI_API_KEY' must be set, you can grab one from
https://platform.openai.com/account/api-keys,
and `export OPENAI_API_KEY="[your key]"'
EOF
        exit 1
    fi

    if ! command -v curl &>/dev/null; then
        echo "\`curl' not found."
        exit 1
    fi

    if ! command -v jq &>/dev/null; then
        echo "\`jq' not found."
        exit 1
    fi
}

function format_sse_data() {
    grep --line-buffered -v 'data: \[DONE\]' |
        sed -u 's/data: //' |
        jq --unbuffered -r '[.choices[].delta.content?] | join("")' |
        # output newline only if it's a newline
        awk '{if ($0 == '\n' && NF == 0) { printf("\n") } else { printf("%s", $0) }}'
}

function request() {
    if [[ $# -gt 1 ]]; then
        local messages=$(jq --null-input \
            --arg sys_msg "$1" \
            --arg user_msg "$2" \
            '[{"role": "system", "content": $sys_msg}, {"role": "user", "content": $user_msg}]')
    else
        local messages=$(jq --null-input \
            --arg user_msg "$1" \
            '[{"role": "user", "content": $user_msg}]')
    fi
    local body=$(
        jq --null-input --argjson messages "$messages" \
            '{"model": "gpt-3.5-turbo", "messages": $messages, "stream": true}'
    )

    curl -s --no-buffer https://api.openai.com/v1/chat/completions \
        -H 'Content-Type: application/json' \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d "$body" | tee >(format_sse_data) >/dev/null
}

function main() {
    check_requirements "$@"
    usage "$@"
    request "$@"
}

main "$@"
